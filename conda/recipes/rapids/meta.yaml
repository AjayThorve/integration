# Copyright (c) 2019, NVIDIA CORPORATION.

{% set version = environ.get('RAPIDS_VER', '0.0.0.dev') %}
{% set minor_version = version.split('.')[0] + '.' + version.split('.')[1] %}
{% set build_offset = environ.get('RAPIDS_OFFSET', 0) %}
{% set cuda_version = '.'.join(environ.get('CUDA_VERSION', '10.0').split('.')[:2]) %}
{% set py_version = environ.get('CONDA_PY', 36) %}

### 
# Versions referenced below are set in `conda/recipe/*versions.yaml` except for
#   those set above (e.g. `cuda_version`)
#
# gpuCI loads the correct file based on the build type (NIGHTLY or RELEASE) in 
#   `ci/cpu/build.sh` and `ci/axis/*.yaml`
#
# Manual builds need to use the `conda build` flag of `-m <path-to-file>.yaml` 
#   to set these versions
###

package:
  name: rapids
  version: {{ version }}

source:
  path: .

build:
  number: {{ build_offset }}
  string: cuda{{ cuda_version }}_py{{ py_version }}_{{ build_offset }}
  script_env:
    - RAPIDS_VER
    - RAPIDS_OFFSET
    - CUDA_VERSION

requirements:
  host:
    - python
  run:
    - cudatoolkit ={{ cuda_version }}.*
    - cupy {{ cupy_version }}
    - nccl {{ nccl_version }}
    - numba {{ numba_version }}
    - numpy {{ numpy_version }}
    - python
    - cudf ={{ minor_version }}.*
    - cugraph ={{ minor_version }}.*
    - cuml ={{ minor_version }}.*
    - cusignal ={{ minor_version }}.*
    - cuspatial ={{ minor_version }}.*
    - cuxfilter ={{ minor_version }}.*
    - dask-cuda ={{ minor_version }}.*
    - dask-xgboost {{ dask_xgboost_version }}
    - rapids-xgboost ={{ minor_version }}.*
    - rmm ={{ minor_version }}.*

test:
  imports:
    - cudf
    - dask_cudf
    - cuml
    - cugraph
    - cuspatial

about:
  home: http://rapids.ai/
  license: Custom
  license_file: LICENSE
  summary: 'RAPIDS Suite - Open GPU Data Science'
  description: |
    Meta-package for the RAPIDS suite of software libraries. RAPIDS gives you the freedom to execute end-to-end data science 
    and analytics pipelines entirely on GPUs. It relies on NVIDIA® CUDA® primitives for low-level compute optimization, 
    but exposes that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.
  doc_url: https://docs.rapids.ai/
  dev_url: https://github.com/rapidsai/
